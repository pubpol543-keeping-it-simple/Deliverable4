scale_x_continuous(labels=percent_format(accuracy=1,suffix="")) +
labs(title = titleText,x='Percentage of Educators and Students in Washington Public Schools (%)',
y='Race and Ethnicity',caption = sourceText)
D2Plot
#save plot
saveRDS(D2Plot, file = "D2Plot.rds")
PctLabels=paste0(round(`MaxTeacherPercent`,2),'%')
PctLabels=paste0(round(MaxTeacherPercent,2),'%')
PctLabels=paste0(round(D1data$`MaxTeacherPercent`,2),'%')
#clean memory
rm(list = ls())
#load data
D1data=read.csv("D1_Data.csv")
#create base plot
base = ggplot(data = D1data,
aes(x = `DemographicCategory`,
y = `MaxTeacherCount`))
#plot formatting
titleText='Washington Educators Are Overwhelmingly White'
sourceText='Source: Washington Office of Superindentent of Public Instruction 2020-2021 School Year (self reported data)'
PctLabels=paste0(round(D1data$`MaxTeacherPercent`,2),'%')
D1data=D1data[order(D1data$`MaxTeacherCount`),]
DemographicCategoryOrd <- as.factor(D1data[order(D1data$`MaxTeacherCount`),]$`DemographicCategory`)
#create final plot
D1Plot = base + geom_bar(fill ="#b4cde3",
stat = 'identity') +
theme(axis.text.x=element_text(angle = 45, hjust = 1), plot.background = element_rect(fill='white', colour = 'white'), panel.background = element_rect(fill='white', colour = 'white'), plot.caption = element_text(hjust = 0),
plot.title = element_text(hjust = 0.5)) +
labs(title=titleText,
x ='Race and Ethnicity',
y = 'Educator Count',
caption = sourceText) + scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000),
limits = c(0, 65000),
labels=unit_format(suffix = '', big.mark = ',')) + scale_x_discrete(limits=DemographicCategoryOrd) +
geom_text(vjust=0, size = 3, aes(y = `MaxTeacherCount`, label = PctLabels))
D1Plot
readRDS("D2Plot.rds")
#create final plot
D1Plot = base + geom_bar(fill ="#b4cde3",
stat = 'identity') +
theme(axis.text.x=element_text(angle = 45, hjust = 1),
plot.background = element_rect(fill='white', colour = 'white'),
panel.background = element_rect(fill='white', colour = 'white'),
plot.caption = element_text(hjust = 0),
plot.title = element_text(hjust = 0.5)) +
labs(title=titleText,
x ='Race and Ethnicity',
y = 'Educator Count',
caption = sourceText) +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000),limits = c(0, 65000),
labels=unit_format(suffix = '', big.mark = ',')) +
scale_x_discrete(limits=DemographicCategoryOrd) +
geom_text(vjust=0, size = 3, aes(y = `MaxTeacherCount`, label = round(`MaxTeacherPercent`,2),'%'))
D1Plot
geom_text(vjust=0, size = 3, aes(y = `MaxTeacherCount`, label = paste0(round(`MaxTeacherPercent`,2),'%'))
D1Plot
geom_text(vjust=0, size = 3, aes(y = `MaxTeacherCount`, label = paste0(round(`MaxTeacherPercent`,2),'%'),)
D1Plot
geom_text(vjust=0, size = 3, aes(y = `MaxTeacherCount`, label = paste0(round(`MaxTeacherPercent`,2),'%')
D1Plot
geom_text(vjust=0, size = 3, aes(y = `MaxTeacherCount`, label = paste0(round(`MaxTeacherPercent`,2),'%'))
D1Plot
geom_text(vjust=0, size = 3, aes(y = `MaxTeacherCount`, label = paste0(round(MaxTeacherPercent,2),'%'))
D1Plot
#create final plot
D1Plot = base + geom_bar(fill ="#b4cde3",
stat = 'identity') +
theme(axis.text.x=element_text(angle = 45, hjust = 1),
plot.background = element_rect(fill='white', colour = 'white'),
panel.background = element_rect(fill='white', colour = 'white'),
plot.caption = element_text(hjust = 0),
plot.title = element_text(hjust = 0.5)) +
labs(title=titleText,
x ='Race and Ethnicity',
y = 'Educator Count',
caption = sourceText) +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000),limits = c(0, 65000),
labels=unit_format(suffix = '', big.mark = ',')) +
scale_x_discrete(limits=DemographicCategoryOrd) +
geom_text(vjust=0, size = 3, aes(y = `MaxTeacherCount`, label = paste0(round(MaxTeacherPercent,2),'%')))
D1Plot
#save plot
saveRDS(D1Plot, file = "D1Plot.rds")
readRDS("D1Plot.rds")
# clean memory
rm(list = ls())
#load data
df3 <- read_csv("Data/D2-FinalData.csv")
#load data
df3 <- read_csv("Data/D3-FinalData.csv")
#clean & set up data
df3 <- df3 %>% mutate(COUNTYFP = sprintf("%03d", COUNTYFP))
df3$COUNTYFP = as.character(zerodata$COUNTYFP)
#clean & set up data
df3 <- df3 %>% mutate(COUNTYFP = sprintf("%03d", COUNTYFP))
# clean memory
rm(list = ls())
#load data
df3 <- read_csv("Data/D3-FinalData.csv")
#clean & set up data
df3 <- df3 %>% mutate(COUNTYFP = sprintf("%03d", COUNTYFP))
df3$COUNTYFP = as.character(zerodata$COUNTYFP)
df3$COUNTYFP = as.character(df3$COUNTYFP)
df3 <- subset(zerodata, DemographicCategory == "White")
df3 <- subset(df3, DemographicCategory == "White")
?`str
?`str
?str()
df3$cluster=as.factor(res.pam$clustering)
df3 <- subset(df3, DemographicCategory == "White")
res.pam=cluster::pam(x=df3$TeacherPct,
k = 3,
cluster.only = F)
df3$cluster=as.factor(res.pam$clustering)
df3a$cluster=factor(df3$cluster,
levels=c(1,3,2),
labels=c("Low","Mid","High"),
ordered=T)
df3$cluster=factor(df3$cluster,
levels=c(1,3,2),
labels=c("Low","Mid","High"),
ordered=T)
#save data frame
write.csv(df3,"D3_Data.csv",row.names = F)
#load data
D3data=read.csv("D3_Data.csv")
#load map
linkmap="https://raw.githubusercontent.com/pubpol543-keeping-it-simple/Deliverable4/main/Data/WA-53-washington-counties.json"
#load data
D3data=read.csv("D3_Data.csv")
mapWA = read_sf(linkMap)
library(sf)
mapWA = read_sf(linkMap)
#load map
linkMap="https://raw.githubusercontent.com/pubpol543-keeping-it-simple/Deliverable4/main/Data/WA-53-washington-counties.json"
mapWA = read_sf(linkMap)
#merge map & data
map_indexes = merge(mapWA, #map first
D3data,
by='COUNTYFP')
#create base plot
baseMap= ggplot(data=mapWA) + theme_classic() +
geom_sf(fill='grey',
color='white')
#load libraries
library(tidyverse)
library(scales)
library(sf)
#create base plot
baseMap= ggplot(data=mapWA) + theme_classic() +
geom_sf(fill='grey',
color='white')
#create final plot
D3Map = baseMap + geom_sf(data=map_indexes,
aes(fill=100*TeacherPct),color=NA) +
scale_fill_gradient(low = '#40004b',high = '#fddbc7',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0))
#plot formatting
Legend_title="% of Educators in Each\nCounty that are White"
titleText = 'High Percentages Of Educators Are White In Every Washington State County'
sourceText = 'Source: Washington Office of Superindentent of Public Instruction 2020-2021 School Year (self reported data)'
#create final plot
D3Map = baseMap + geom_sf(data=map_indexes,
aes(fill=100*TeacherPct),color=NA) +
scale_fill_gradient(low = '#40004b',high = '#fddbc7',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0))
D3Map
#create final plot
D3Map = baseMap + geom_sf(data=map_indexes,
aes(fill=100*TeacherPct),color=NA) +
scale_fill_gradient(low = '#40004b',high = '#fddbc7',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0))
D3Map
#plot formatting
Legend_title="% of white educators \nin each county"
titleText = 'High Percentages Of White Educators In Every Washington State County'
sourceText = 'Source: Washington Office of Superindentent of Public Instruction 2020-2021 School Year (self reported data)'
#create final plot
D3Map = baseMap + geom_sf(data=map_indexes,
aes(fill=100*TeacherPct),color=NA) +
scale_fill_gradient(low = '#fddbc7',high = '#40004b',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0),
legend.title = element_text(hjust = 0.0, color = '#5b5b5b'),
plot.title= element_text(hjust = 0.0)) +
theme (axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1))
D3Map
#create base plot
baseMap= ggplot(data=mapWA) + theme_classic() +
geom_sf(fill='grey',
color='white')
#plot formatting
Legend_title="% of white educators \nin each county"
titleText = 'High Percentages Of White Educators In Every Washington State County'
sourceText = 'Source: Washington Office of Superindentent of Public Instruction 2020-2021 School Year (self reported data)'
#create final plot
D3Map = baseMap + geom_sf(data=map_indexes,
aes(fill=100*TeacherPct),color=NA) +
scale_fill_gradient(low = '#fddbc7',high = '#40004b',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0),
legend.title = element_text(hjust = 0.0, color = '#5b5b5b'),
plot.title= element_text(hjust = 0.0)) +
theme (axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1))
D3Map
#create base plot
baseMap= ggplot(data=mapWA) + theme_classic()
#plot formatting
Legend_title="% of white educators \nin each county"
titleText = 'High Percentages Of White Educators In Every Washington State County'
sourceText = 'Source: Washington Office of Superindentent of Public Instruction 2020-2021 School Year (self reported data)'
#create final plot
D3Map = baseMap + geom_sf(data=map_indexes,
aes(fill=100*TeacherPct),color=NA) +
scale_fill_gradient(low = '#fddbc7',high = '#40004b',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0),
legend.title = element_text(hjust = 0.0, color = '#5b5b5b'),
plot.title= element_text(hjust = 0.0)) +
theme (axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1))
D3Map
#create base plot
baseMap= ggplot(data=mapWA) + theme_classic() +
geom_sf(fill='grey',
color='white')
#create final plot
D3Map = baseMap + geom_sf(data=map_indexes,
aes(fill=100*TeacherPct),color=NA) +
scale_fill_gradient(low = '#fddbc7',high = '#40004b',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0),
legend.title = element_text(hjust = 0.0, color = '#5b5b5b'),
plot.title= element_text(hjust = 0.0)) +
theme (axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1))
#create base plot
baseMap= ggplot(data=mapWA) + theme_classic() +
geom_sf(fill='grey', color='white') + geom_sf(data=map_indexes,
aes(fill=100*TeacherPct),color=NA)
#create final plot
D3Map = baseMap +
scale_fill_gradient(low = '#fddbc7',high = '#40004b',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0),
legend.title = element_text(hjust = 0.0, color = '#5b5b5b'),
plot.title= element_text(hjust = 0.0)) +
theme (axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1))
D3Map
#create base map
baseMap= ggplot(data=mapWA) + theme_classic() +
geom_sf(fill='grey', color='white')
#create final plot
dataMap = baseMap + geom_sf(data=map_indexes,
aes(fill=100*TeacherPct),color=NA)
D3Map = dataMap +
scale_fill_gradient(low = '#fddbc7',high = '#40004b',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0),
legend.title = element_text(hjust = 0.0, color = '#5b5b5b'),
plot.title= element_text(hjust = 0.0)) +
theme (axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1))
D3Map
#create final plot
D3Map = baseMap + geom_sf(data=map_indexes,aes(fill=100*TeacherPct),color=NA) +
scale_fill_gradient(low = '#fddbc7',high = '#40004b',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0),
legend.title = element_text(hjust = 0.0, color = '#5b5b5b'),
plot.title= element_text(hjust = 0.0)) +
theme (axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1))
D3Map
# clean memory
rm(list = ls())
#load data
D3data=read.csv("D3_Data.csv")
#load map
linkMap="https://raw.githubusercontent.com/pubpol543-keeping-it-simple/Deliverable4/main/Data/WA-53-washington-counties.json"
mapWA = read_sf(linkMap)
#merge map & data
map_indexes = merge(mapWA, D3data, by='COUNTYFP')
View(map_indexes)
View(map_indexes)
View(D3data)
View(map_indexes)
View(map_indexes)
View(mapWA)
# clean memory
rm(list = ls())
#load data
df3 <- read_csv("Data/D3-FinalData.csv")
#clean & set up data
df3 <- df3 %>% mutate(COUNTYFP = sprintf("%03d", COUNTYFP))
df3$COUNTYFP = as.character(df3$COUNTYFP)
df3 <- subset(df3, DemographicCategory == "White")
res.pam=cluster::pam(x=df3$TeacherPct,
k = 3,
cluster.only = F)
df3$cluster=as.factor(res.pam$clustering)
df3$cluster=factor(df3$cluster,
levels=c(1,3,2),
labels=c("Low","Mid","High"),
ordered=T)
View(df3)
View(df3)
#save data frame
write.csv(df3,"D3_Data.csv",row.names = F)
#save data frame
write.csv(df3,"D3_Data.csv",row.names = F)
#load data
D3data=read.csv("D3_Data.csv")
#load map
linkMap="https://raw.githubusercontent.com/pubpol543-keeping-it-simple/Deliverable4/main/Data/WA-53-washington-counties.json"
mapWA = read_sf(linkMap)
#merge map & data
D3data <- D3data %>% mutate(COUNTYFP = sprintf("%03d", COUNTYFP))
D3data$COUNTYFP = as.character(D3data$COUNTYFP)
map_indexes = merge(mapWA, D3data, by='COUNTYFP')
#create base map
baseMap= ggplot(data=mapWA) + theme_classic() +
geom_sf(fill='grey', color='white')
#plot formatting
Legend_title="% of white educators \nin each county"
titleText = 'High Percentages Of White Educators In Every Washington State County'
sourceText = 'Source: Washington Office of Superindentent of Public Instruction 2020-2021 School Year (self reported data)'
#create final plot
D3Map = baseMap + geom_sf(data=map_indexes,aes(fill=100*TeacherPct),color=NA) +
scale_fill_gradient(low = '#fddbc7',high = '#40004b',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0),
legend.title = element_text(hjust = 0.0, color = '#5b5b5b'),
plot.title= element_text(hjust = 0.0)) +
theme (axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1))
D3Map
#load libraries
library(tidyverse)
# clean memory
rm(list = ls())
#load data
df1 <- read_csv("Data/D1-TeacherDemographics.csv")
#clean & set up data
str(df1,width = 70,strict.width='cut')
df1$`MaxTeacherPercent` <- parse_number(df1$`MaxTeacherPercent`)
head(df1$`MaxTeacherCount`,20)
absoluteT=table(df1$`MaxTeacherCount`,
exclude = 'nothing')
dfrace <- df1[df1$`DemographicCategoryType`=="RaceEthnicity",]
renamevar <- function(varname){
case_when(varname=='Native Hawaiian/Other Pacific Islander' ~ 'Pacific Islander',
varname=='American Indian/Alaskan Native' ~ 'Indigenous',
varname=='Black/African American' ~'Black',
varname=='Two or More Races' ~ 'Multiracial',
varname=='Hispanic/Latino of any race(s)' ~ 'Latinx',
TRUE ~ varname)
}
dfrace$`DemographicCategory` <- sapply(dfrace$`DemographicCategory`, FUN = renamevar)
#save data frame
write.csv(dfrace,"D1_Data.csv",row.names = F)
# clean memory
rm(list = ls())
#load data
df_students <- read_csv("Data/D2-StudentEnrollmentSummary.csv")
df_educators <- read_csv("Data/D2-TeacherDemographicsSummary.csv")
#clean & set up data
dfrace_educators <- df_educators[df_educators$`Demographic Category Type`=="RaceEthnicity",]
dfrace_students <- df_students [df_students$`Student Group Type`=="federalethracerollupcode",]
dfrace_educators$Percent <- as.numeric(gsub("%","",dfrace_educators$`Max. Teacher Percent`))/100
CountAllStudents <- sum(dfrace_students$`Number Of Students`)
dfrace_students$Percent <- dfrace_students$`Number Of Students`/CountAllStudents
#merge data frames
dfrace_educators$Role <-'Educator'
dfrace_students$Role <-'Student'
dfrace_educators <-dfrace_educators %>%
rename(
RaceEthnicity =`Demographic Category`,
Count =`Max. Teacher Count`
)
dfrace_students <-dfrace_students %>%
rename(
RaceEthnicity =`Student Group`,
Count =`Number Of Students`
)
dfrace_educators <-dfrace_educators %>%
select(RaceEthnicity, Count, Role, Percent)
dfrace_students <-dfrace_students %>%
select(RaceEthnicity, Count, Role, Percent)
df2 <- union_all(dfrace_educators, dfrace_students)
#rename variable names
renamevar <- function(varname){
case_when(varname=='Native Hawaiian/Other Pacific Islander' ~ 'Pacific Islander',
varname=='Native Hawaiian/ Other Pacific Islander' ~ 'Pacific Islander',
varname=='American Indian/Alaskan Native' ~ 'Indigenous',
varname=='American Indian/ Alaskan Native' ~ 'Indigenous',
varname=='Black/African American' ~'Black',
varname=='Black/ African American' ~'Black',
varname=='Two or More Races' ~ 'Multiracial',
varname=='Hispanic/Latino of any race(s)' ~ 'Latinx',
varname=='Hispanic/ Latino of any race(s)' ~ 'Latinx',
TRUE ~ varname)
}
df2$RaceEthnicity <- sapply(df2$RaceEthnicity, FUN = renamevar)
#save data frame
write.csv(df2,"D2_Data.csv",row.names = F)
# clean memory
rm(list = ls())
#load data
df3 <- read_csv("Data/D3-FinalData.csv")
#clean & set up data
df3 <- subset(df3, DemographicCategory == "White")
res.pam=cluster::pam(x=df3$TeacherPct,
k = 3,
cluster.only = F)
df3$cluster=as.factor(res.pam$clustering)
df3$cluster=factor(df3$cluster,
levels=c(1,3,2),
labels=c("Low","Mid","High"),
ordered=T)
#save data frame
write.csv(df3,"D3_Data.csv",row.names = F)
# clean memory
rm(list = ls())
#load data
D3data=read.csv("D3_Data.csv")
#load map
linkMap="https://raw.githubusercontent.com/pubpol543-keeping-it-simple/Deliverable4/main/Data/WA-53-washington-counties.json"
mapWA = read_sf(linkMap)
#merge map & data
D3data <- D3data %>% mutate(COUNTYFP = sprintf("%03d", COUNTYFP))
D3data$COUNTYFP = as.character(D3data$COUNTYFP)
map_indexes = merge(mapWA, D3data, by='COUNTYFP')
#create base map
baseMap= ggplot(data=mapWA) + theme_classic() +
geom_sf(fill='grey', color='white')
#plot formatting
Legend_title="% of white educators \nin each county"
titleText = 'High Percentages Of White Educators In Every Washington State County'
sourceText = 'Source: Washington Office of Superindentent of Public Instruction 2020-2021 School Year (self reported data)'
#create final plot
D3Map = baseMap + geom_sf(data=map_indexes,aes(fill=100*TeacherPct),color=NA) +
scale_fill_gradient(low = '#fddbc7',high = '#40004b',name=Legend_title) +
labs(title = titleText,caption = sourceText) +
theme(plot.caption = element_text(hjust = 0),
legend.title = element_text(hjust = 0.0, color = '#5b5b5b'),
plot.title= element_text(hjust = 0.0)) +
theme (axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1))
D3Map
#save plot
saveRDS(D3Map, file = "D3Map.rds")
library(flexdashboard)
readRDS("D3Mapt.rds")
library(flexdashboard)
library(flexdashboard)
Column {data-width=450}
### Deliverable 3: Map of Educator Demographics
```{r}
readRDS("D3Mapt.rds")
readRDS("D3Map.rds")
